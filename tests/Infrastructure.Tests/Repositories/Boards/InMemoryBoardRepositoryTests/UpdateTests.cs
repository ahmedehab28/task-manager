
using Domain.Entities.Boards;
using FluentAssertions;
using Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests.Shared;

namespace Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests
{
    public class UpdateTests
    {
        [Fact]
        public void Update_WithValidBoardAndEmptyRepo_ShouldUpdateBoard()
        {
            // Arrange
            Board customBoard = new("Board Old Title", "Board Old Description");
            var repository = new InMemoryBoardRepositoryBuilder()
                .WithCustomBoard(customBoard)
                .Build();

            Board updatedBoard = new("My Updated Board Title", "My Updated Board Description")
            { 
                Id = customBoard.Id 
            };

            // Act
            repository.Update(updatedBoard);

            // Assertion
            Board? fetchUpdatedBoard = repository.GetById(customBoard.Id);
            var allBoards = repository.GetAll();

            allBoards.Should().HaveCount(1);    // Ensure no board was added to the board list and it was only updated

            fetchUpdatedBoard                   // No Changes were made to the repo
                .Should().NotBeNull()
                .And.Match<Board>(b => 
                    b.Title == updatedBoard.Title &&
                    b.Description == updatedBoard.Description &&
                    b.CreatedAt == customBoard.CreatedAt
                );
        }

        [Fact]
        public void Update_WithValidBoardAndSeededRepo_ShouldUpdateBoard()
        {
            // Arrange
            Board customBoard = new("My Custom Board Title");
            var repository = new InMemoryBoardRepositoryBuilder()
                .WithCustomBoard(customBoard)
                .WithAutoGeneratedBoards(5)
                .Build();

            var boardsBeforeUpdate = repository
                .GetAll()
                .Select(b => new
                {
                    b.Id,
                    b.Title,
                    b.Description,
                    b.CreatedAt
                }).ToList();

            Board updatedBoard = new("My new Updated Board Title", "My new Addded Description") { Id = customBoard.Id };

            // Act
            repository.Update(updatedBoard);

            // Assertion
            var fetechUpdatedBoard = repository.GetById(customBoard.Id);
            var boardsAfterUpdate = repository
                .GetAll()
                .Select(b => new
                {
                    b.Id,
                    b.Title,
                    b.Description,
                    b.CreatedAt
                }).ToList();

            fetechUpdatedBoard
                .Should().NotBeNull()
                .And.Match<Board>(b =>
                    b.Id == customBoard.Id &&
                    b.Title == updatedBoard.Title
                    && b.Description == updatedBoard.Description
                    && b.CreatedAt == customBoard.CreatedAt
                );

            boardsAfterUpdate
                .Should().HaveCount(boardsBeforeUpdate.Count())
                .And.NotBeEquivalentTo(boardsBeforeUpdate);
        }

        [Fact]
        public void Update_WithNonExistingBoardInEmptyRepo_ShouldDoNothing()
        {
            // Arrange
            var repository = new InMemoryBoardRepositoryBuilder().Build();
            Board fakeRepo = new("Fake Repo Title");

            // Act
            repository.Update(fakeRepo);

            // Assertion
            var allBoards = repository.GetAll();

            allBoards.Should().BeEmpty();
        }

        [Fact]
        public void Update_WithNonExistingBoardInSeededRepo_ShouldDoNothing()
        {
            // Arrange
            var repository = new InMemoryBoardRepositoryBuilder()
                .WithAutoGeneratedBoards(5)
                .Build();
            var repoBoardsBeforeUpdate = repository
                .GetAll()
                .Select(b => new
                {
                    b.Id,
                    b.Title,
                    b.Description,
                    b.CreatedAt
                }).ToList();
            Board fakeRepo = new("Fake Repo Title");

            // Act
            repository.Update(fakeRepo);

            // Assertion
            var repoBoardsAfterUpdate = repository
                .GetAll()
                .Select(b => new
                {
                    b.Id,
                    b.Title,
                    b.Description,
                    b.CreatedAt
                }).ToList();

            repoBoardsAfterUpdate
                .Should().HaveCount(5)
                .And.BeEquivalentTo(repoBoardsBeforeUpdate);    
        }
    }
}
