
//using Domain.Entities;
//using FluentAssertions;
//using Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests.Shared;

//namespace Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests
//{
//    public class UpdateTests
//    {
//        [Fact]
//        public async Task Update_WithValidBoardAndEmptyRepo_ShouldUpdateBoard()
//        {
//            // Arrange
//            Board customBoard = new("Board Old Title", "Board Old Description");
//            var repository = await new InMemoryBoardRepositoryBuilder()
//                .WithCustomBoard(customBoard)
//                .Build();

//            Board updatedBoard = new("My Updated Board Title", "My Updated Board Description")
//            { 
//                Id = customBoard.Id 
//            };

//            // Act
//            await repository.UpdateAsync(updatedBoard);

//            // Assertion
//            Board? fetchUpdatedBoard = await repository.GetByIdAsync(customBoard.Id);
//            var allBoards = await repository.GetAllAsync();

//            allBoards.Should().HaveCount(1);    // Ensure no board was added to the board list and it was only updated

//            fetchUpdatedBoard                   // No Changes were made to the repo
//                .Should().NotBeNull()
//                .And.Match<Board>(b => 
//                    b.Title == updatedBoard.Title &&
//                    b.Description == updatedBoard.Description &&
//                    b.CreatedAt == customBoard.CreatedAt
//                );
//        }

//        [Fact]
//        public async Task Update_WithValidBoardAndSeededRepo_ShouldUpdateBoard()
//        {
//            // Arrange
//            Board customBoard = new("My Custom Board Title");
//            var repository = await new InMemoryBoardRepositoryBuilder()
//                .WithCustomBoard(customBoard)
//                .WithAutoGeneratedBoards(5)
//                .Build();

//            var boardsBeforeUpdate = await repository.GetAllAsync();
//            boardsBeforeUpdate.Select(b => new
//                {
//                    b.Id,
//                    b.Title,
//                    b.Description,
//                    b.CreatedAt
//                }).ToList();

//            Board updatedBoard = new("My new Updated Board Title", "My new Addded Description") { Id = customBoard.Id };

//            // Act
//            await repository.UpdateAsync(updatedBoard);

//            // Assertion
//            var fetechUpdatedBoard = await repository.GetByIdAsync(customBoard.Id);
//            var boardsAfterUpdate = await repository.GetAllAsync();
//                boardsAfterUpdate.Select(b => new
//                {
//                    b.Id,
//                    b.Title,
//                    b.Description,
//                    b.CreatedAt
//                }).ToList();

//            fetechUpdatedBoard
//                .Should().NotBeNull()
//                .And.Match<Board>(b =>
//                    b.Id == customBoard.Id &&
//                    b.Title == updatedBoard.Title
//                    && b.Description == updatedBoard.Description
//                    && b.CreatedAt == customBoard.CreatedAt
//                );

//            boardsAfterUpdate
//                .Should().HaveCount(boardsBeforeUpdate.Count())
//                .And.NotBeEquivalentTo(boardsBeforeUpdate);
//        }

//        [Fact]
//        public async Task Update_WithNonExistingBoardInEmptyRepo_ShouldDoNothing()
//        {
//            // Arrange
//            var repository = await new InMemoryBoardRepositoryBuilder().Build();
//            Board fakeRepo = new("Fake Repo Title");

//            // Act
//            await repository.UpdateAsync(fakeRepo);

//            // Assertion
//            var allBoards = await repository.GetAllAsync();

//            allBoards.Should().BeEmpty();
//        }

//        [Fact]
//        public async Task Update_WithNonExistingBoardInSeededRepo_ShouldDoNothing()
//        {
//            // Arrange
//            var repository = await new InMemoryBoardRepositoryBuilder()
//                .WithAutoGeneratedBoards(5)
//                .Build();
//            var repoBoardsBeforeUpdate = await repository.GetAllAsync();
//            repoBoardsBeforeUpdate.Select(b => new
//                {
//                    b.Id,
//                    b.Title,
//                    b.Description,
//                    b.CreatedAt
//                }).ToList();
//            Board fakeRepo = new("Fake Repo Title");

//            // Act
//            await repository.UpdateAsync(fakeRepo);

//            // Assertion
//            var repoBoardsAfterUpdate = await repository.GetAllAsync();
//            repoBoardsAfterUpdate.Select(b => new
//                {
//                    b.Id,
//                    b.Title,
//                    b.Description,
//                    b.CreatedAt
//                }).ToList();

//            repoBoardsAfterUpdate
//                .Should().HaveCount(5)
//                .And.BeEquivalentTo(repoBoardsBeforeUpdate);    
//        }
//    }
//}
