//using Domain.Entities;
//using FluentAssertions;
//using Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests.Shared;

//namespace Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests
//{
//    public class DeleteTests
//    {
//        [Fact]
//        public async Task Delete_WithEmptyRepo_ShouldDoNothing()
//        {
//            // Arrange
//            var repository = await new InMemoryBoardRepositoryBuilder().Build();

//            // Act
//            await repository.DeleteAsync(Guid.NewGuid());

//            // Assertion
//            var results = await repository.GetAllAsync();
//            results.Should().HaveCount(0);
//        }

//        [Fact]
//        public async Task Delete_WithNonExistingIdAndSeededRepo_ShouldDoNothing()
//        {
//            // Arrange
//            var repository = await new InMemoryBoardRepositoryBuilder()
//                .WithAutoGeneratedBoards(6)
//                .Build();

//            var boardsBeforeDelete = await repository.GetAllAsync();
//            boardsBeforeDelete.Select(b => new
//                {
//                    b.Id,
//                    b.Title,
//                    b.Description,
//                    b.CreatedAt
//                }).ToList();

//            // Act
//           await  repository.DeleteAsync(Guid.NewGuid());
//            var boardsAfterDelete =  await repository.GetAllAsync();
//            boardsAfterDelete.Select(b => new
//                {
//                    b.Id,
//                    b.Title,
//                    b.Description,
//                    b.CreatedAt
//                }).ToList();

//            // Assertion
//            boardsAfterDelete
//                .Should().HaveCount(boardsBeforeDelete.Count())
//                .And.BeEquivalentTo(boardsBeforeDelete);

//        }

//        [Fact]
//        public async Task Delete_WithExistingBoardAndOneBoardInRepo_ShouldDeleteBoard() 
//        {
//            // Arrange
//            Board customBoard = new("My Board to be deleted");
//            var repository = await new InMemoryBoardRepositoryBuilder()
//                .WithCustomBoard(customBoard)
//                .Build();

//            // Act
//            await repository.DeleteAsync(customBoard.Id);

//            // Assertion
//            var results = await repository.GetAllAsync();
//            results.Should().BeEmpty();

//        }

//        [Fact]
//        public async Task DeleteWithExistingBoardAndSeededRepo_ShouldDeleteBoard()
//        {
//            // Arrange
//            Board customBoard = new("My Custom Board Title");
//            var repository = await new InMemoryBoardRepositoryBuilder()
//                .WithAutoGeneratedBoards(10)
//                .WithCustomBoard(customBoard)
//                .Build();

//            var boardsBeforeDelete = await repository.GetAllAsync();
//            boardsBeforeDelete.ToList();

//            // Act
//            await repository.DeleteAsync(customBoard.Id);
//            var boardsAfterDelete = await repository.GetAllAsync();
//            boardsAfterDelete.ToList();

//            // Assertion
//            boardsAfterDelete.Should().HaveCount(boardsBeforeDelete.Count() - 1);

//            var expectedRemainingBoards = boardsBeforeDelete
//                .Where(b => b.Id != customBoard.Id)
//                .Select(b => new
//                {
//                    b.Id,
//                    b.Title,
//                    b.Description,
//                    b.CreatedAt
//                });

//            var actualRemainingBoards = boardsAfterDelete
//                .Select(b => new
//                {
//                    b.Id,
//                    b.Title,
//                    b.Description,
//                    b.CreatedAt
//                });

//            actualRemainingBoards.Should().BeEquivalentTo(expectedRemainingBoards);
//            var result = await repository.GetByIdAsync(customBoard.Id);
//            result.Should().BeNull();
//        }
//    }
//}
