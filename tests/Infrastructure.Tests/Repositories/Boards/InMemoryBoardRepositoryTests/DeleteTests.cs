using Domain.Entities.Boards;
using FluentAssertions;
using Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests.Shared;

namespace Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests
{
    public class DeleteTests
    {
        [Fact]
        public void Delete_WithEmptyRepo_ShouldDoNothing()
        {
            // Arrange
            var repository = new InMemoryBoardRepositoryBuilder().Build();

            // Act
            repository.Delete(Guid.NewGuid());

            // Assertion
            repository.GetAll().Should().HaveCount(0);
        }

        [Fact]
        public void Delete_WithNonExistingIdAndSeededRepo_ShouldDoNothing()
        {
            // Arrange
            var repository = new InMemoryBoardRepositoryBuilder()
                .WithAutoGeneratedBoards(6)
                .Build();

            var boardsBeforeDelete = repository
                .GetAll()
                .Select(b => new
                {
                    b.Id,
                    b.Title,
                    b.Description,
                    b.CreatedAt
                }).ToList();

            // Act
            repository.Delete(Guid.NewGuid());
            var boardsAfterDelete = repository
                .GetAll()
                .Select(b => new
                {
                    b.Id,
                    b.Title,
                    b.Description,
                    b.CreatedAt
                }).ToList();

            // Assertion
            boardsAfterDelete
                .Should().HaveCount(boardsBeforeDelete.Count())
                .And.BeEquivalentTo(boardsBeforeDelete);

        }

        [Fact]
        public void Delete_WithExistingBoardAndOneBoardInRepo_ShouldDeleteBoard() 
        {
            // Arrange
            Board customBoard = new("My Board to be deleted");
            var repository = new InMemoryBoardRepositoryBuilder()
                .WithCustomBoard(customBoard)
                .Build();

            // Act
            repository.Delete(customBoard.Id);

            // Assertion
            repository.GetAll().Should().BeEmpty();

        }

        [Fact]
        public void DeleteWithExistingBoardAndSeededRepo_ShouldDeleteBoard()
        {
            // Arrange
            Board customBoard = new("My Custom Board Title");
            var repository = new InMemoryBoardRepositoryBuilder()
                .WithAutoGeneratedBoards(10)
                .WithCustomBoard(customBoard)
                .Build();

            var boardsBeforeDelete = repository.GetAll().ToList();

            // Act
            repository.Delete(customBoard.Id);
            var boardsAfterDelete = repository.GetAll().ToList();

            // Assertion
            boardsAfterDelete.Should().HaveCount(boardsBeforeDelete.Count() - 1);

            var expectedRemainingBoards = boardsBeforeDelete
                .Where(b => b.Id != customBoard.Id)
                .Select(b => new
                {
                    b.Id,
                    b.Title,
                    b.Description,
                    b.CreatedAt
                });

            var actualRemainingBoards = boardsAfterDelete
                .Select(b => new
                {
                    b.Id,
                    b.Title,
                    b.Description,
                    b.CreatedAt
                });

            actualRemainingBoards.Should().BeEquivalentTo(expectedRemainingBoards);
            repository.GetById(customBoard.Id).Should().BeNull();
        }
    }
}
