//using Domain.Entities;
//using FluentAssertions;
//using Infrastructure.Repositories.Boards;
//using Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests.Shared;

//namespace Infrastructure.Tests.Repositories.Boards.InMemoryBoardRepositoryTests
//{
//    public class GetByIdTests
//    {
//        [Fact]
//        public async Task GetById_WithValidIdAndRepoWithOneBoard_ShouldReturnBoard()
//        {
//            // Arrange
//            Board board = new("Board Title");
//            var _repository = await new InMemoryBoardRepositoryBuilder()
//                .WithCustomBoard(board)
//                .Build();

//            // Act
//            Board? result = await _repository.GetByIdAsync(board.Id);

//            // Assert
//            result!.Id.Should().Be(result.Id);
//            result!.Title.Should().Be(board.Title);
//            result!.Description.Should().Be(board.Description);
//            result!.CreatedAt.Should().Be(board.CreatedAt);
//        }

//        [Fact]
//        public async Task GetById_WithValidIdAndRepoWithMoreThanOneBoard_ShouldReturnBoard()
//        {
//            // Arrange
//            Board board = new("Board To GetById");
//            var _repository = await new InMemoryBoardRepositoryBuilder()
//                .WithAutoGeneratedBoards(5)
//                .WithCustomBoard(board)
//                .Build();

//            // Act
//            Board result = (await _repository.GetByIdAsync(board.Id))!;


//            // Assertion
//            result!.Title.Should().Be(board.Title);
//        }

//        [Fact]
//        public async Task GetById_WithInvalidId_ShouldReturnNull()
//        {
//            // Arrange
//            var _repository = await new InMemoryBoardRepositoryBuilder()
//                .WithAutoGeneratedBoards(5)
//                .Build();

//            // Act
//            var result = await _repository.GetByIdAsync(Guid.Empty);

//            // Assertion
//            result.Should().BeNull();
//        }

//        [Fact]
//        public async Task GetById_WithNonExistingId_ShouldReturnNull()
//        {
//            // Arrange
//            var _repository = await new InMemoryBoardRepositoryBuilder()
//                .WithAutoGeneratedBoards(4)
//                .Build();

//            // Act
//            var result = await _repository.GetByIdAsync(Guid.NewGuid());

//            // Assertion
//            result.Should().BeNull();

//        }
//    }
//}
